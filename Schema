Here is a simplified description of the schema with the key relationships highlighted:

### Entities and Their Relationships

1. **Language**
   - Fields: `LANGUAGE_ID`, `NAME`, `LAST_UPDATE`
   - Relationships: 
     - One-to-Many with `Film` (a language can be associated with many films)

2. **Film**
   - Fields: `FILM_ID`, `TITLE`, `DESCRIPTION`, `RELEASE_YEAR`, `LANGUAGE_ID`, `ORIGINAL_LANGUAGE_ID`, `RENTAL_DURATION`, `RENTAL_RATE`, `LENGTH`, `REPLACEMENT_COST`, `RATING`, `SPECIAL_FEATURES`, `LAST_UPDATE`
   - Relationships:
     - Many-to-One with `Language` (a film has one language)
     - Many-to-Many with `Actor` through `Film_Actor` (a film can have many actors)
     - Many-to-Many with `Category` through `Film_Category` (a film can belong to many categories)
     - One-to-Many with `Inventory` (a film can be in many inventories)

3. **Actor**
   - Fields: `ACTOR_ID`, `FIRST_NAME`, `LAST_NAME`, `LAST_UPDATE`
   - Relationships:
     - Many-to-Many with `Film` through `Film_Actor` (an actor can act in many films)

4. **Category**
   - Fields: `CATEGORY_ID`, `NAME`, `LAST_UPDATE`
   - Relationships:
     - Many-to-Many with `Film` through `Film_Category` (a category can have many films)

5. **Film_Actor**
   - Fields: `ACTOR_ID`, `FILM_ID`, `LAST_UPDATE`
   - Relationships:
     - Many-to-One with `Actor` (associates actors with films)
     - Many-to-One with `Film` (associates films with actors)

6. **Film_Category**
   - Fields: `FILM_ID`, `CATEGORY_ID`, `LAST_UPDATE`
   - Relationships:
     - Many-to-One with `Film` (associates films with categories)
     - Many-to-One with `Category` (associates categories with films)

7. **Inventory**
   - Fields: `INVENTORY_ID`, `FILM_ID`, `STORE_ID`, `LAST_UPDATE`
   - Relationships:
     - Many-to-One with `Film` (an inventory item belongs to a film)
     - Many-to-One with `Store` (an inventory item belongs to a store)
     - One-to-Many with `Rental` (an inventory item can be rented many times)

8. **Store**
   - Fields: `STORE_ID`, `MANAGER_STAFF_ID`, `ADDRESS_ID`, `LAST_UPDATE`
   - Relationships:
     - One-to-Many with `Inventory` (a store can have many inventory items)
     - Many-to-One with `Staff` (a store has a manager)
     - Many-to-One with `Address` (a store has an address)
     - One-to-Many with `Customer` (a store can have many customers)

9. **Customer**
   - Fields: `CUSTOMER_ID`, `STORE_ID`, `FIRST_NAME`, `LAST_NAME`, `EMAIL`, `ADDRESS_ID`, `ACTIVE`, `CREATE_DATE`, `LAST_UPDATE`
   - Relationships:
     - Many-to-One with `Store` (a customer belongs to a store)
     - Many-to-One with `Address` (a customer has an address)
     - One-to-Many with `Rental` (a customer can have many rentals)
     - One-to-Many with `Payment` (a customer can make many payments)

10. **Address**
    - Fields: `ADDRESS_ID`, `ADDRESS`, `ADDRESS2`, `DISTRICT`, `CITY_ID`, `POSTAL_CODE`, `PHONE`, `LAST_UPDATE`
    - Relationships:
      - Many-to-One with `City` (an address belongs to a city)
      - One-to-Many with `Customer` (an address can be associated with many customers)
      - One-to-Many with `Store` (an address can be associated with many stores)
      - One-to-Many with `Staff` (an address can be associated with many staff members)

11. **City**
    - Fields: `CITY_ID`, `CITY`, `COUNTRY_ID`, `LAST_UPDATE`
    - Relationships:
      - Many-to-One with `Country` (a city belongs to a country)
      - One-to-Many with `Address` (a city can have many addresses)

12. **Country**
    - Fields: `COUNTRY_ID`, `COUNTRY`, `LAST_UPDATE`
    - Relationships:
      - One-to-Many with `City` (a country can have many cities)

13. **Staff**
    - Fields: `STAFF_ID`, `FIRST_NAME`, `LAST_NAME`, `ADDRESS_ID`, `EMAIL`, `STORE_ID`, `ACTIVE`, `USERNAME`, `PASSWORD`, `LAST_UPDATE`
    - Relationships:
      - Many-to-One with `Address` (a staff member has an address)
      - Many-to-One with `Store` (a staff member works at a store)
      - One-to-Many with `Rental` (a staff member can handle many rentals)
      - One-to-Many with `Payment` (a staff member can process many payments)

14. **Rental**
    - Fields: `RENTAL_ID`, `RENTAL_DATE`, `INVENTORY_ID`, `CUSTOMER_ID`, `RETURN_DATE`, `STAFF_ID`, `LAST_UPDATE`
    - Relationships:
      - Many-to-One with `Inventory` (a rental item is from an inventory)
      - Many-to-One with `Customer` (a rental is associated with a customer)
      - Many-to-One with `Staff` (a rental is processed by a staff member)
      - One-to-Many with `Payment` (a rental can have many payments)

15. **Payment**
    - Fields: `PAYMENT_ID`, `CUSTOMER_ID`, `STAFF_ID`, `RENTAL_ID`, `AMOUNT`, `PAYMENT_DATE`, `LAST_UPDATE`
    - Relationships:
      - Many-to-One with `Customer` (a payment is made by a customer)
      - Many-to-One with `Staff` (a payment is processed by a staff member)
      - Many-to-One with `Rental` (a payment is for a rental)

### Simplified Diagram

- **Film** ↔ **Actor** (Many-to-Many through `Film_Actor`)
- **Film** ↔ **Category** (Many-to-Many through `Film_Category`)
- **Film** ↔ **Inventory** (One-to-Many)
- **Inventory** ↔ **Rental** (One-to-Many)
- **Rental** ↔ **Payment** (One-to-Many)
- **Customer** ↔ **Rental** (One-to-Many)
- **Customer** ↔ **Payment** (One-to-Many)
- **Store** ↔ **Inventory** (One-to-Many)
- **Store** ↔ **Customer** (One-to-Many)
- **Address** ↔ **Customer** (One-to-Many)
- **Address** ↔ **Store** (One-to-Many)
- **Address** ↔ **Staff** (One-to-Many)
- **City** ↔ **Address** (One-to-Many)
- **Country** ↔ **City** (One-to-Many)

This should provide a clear overview of the main entities and their relationships within the database.